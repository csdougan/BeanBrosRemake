###############################################################################
#
#  Bean Brothers (remake) - for ZX Spectrum Next / N-Go
#
#  (c) 2023 David Crespo - https://github.com/dcrespo3d
#                          https://davidprograma.itch.io
#                          https://www.youtube.com/@Davidprograma
#
#  Based on Bean Brothers for ZX Spectrum 48/128K - (c) 2018 Dave Hughes
#
###############################################################################
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.  
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY# without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
# 
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>. 
#
###############################################################################

from levmap_cvt import levmap_cvt
from levdef_cvt import levdef_cvt

levcnt = 40

asmtxt1 = '''SECTION PAGE_34_LEVELS

ORG $0000

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; tables
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

PUBLIC _tileset_palgroup

_tileset_palgroup:
    INCBIN "res/tileset_palgroup.bin"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

PUBLIC _tileset_colltable

_tileset_colltable:
    INCBIN "res/tileset_colltable.bin"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; original levels - autogenerated by tool
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

'''

asmtxt2 = '''SECTION PAGE_44_LEVELS

ORG $0000

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; tables
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

PUBLIC _tileset_palgroup_44

_tileset_palgroup_44:
    INCBIN "res/tileset_palgroup.bin"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

PUBLIC _tileset_colltable_44

_tileset_colltable_44:
    INCBIN "res/tileset_colltable.bin"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; extended levels - autogenerated by tool
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

'''

def convert_levels():
    global asmtxt1
    global asmtxt2

    print('*' * 60)
    print('**  Converting Levels')
    print('*' * 60)

    mapifp = '../levels/levmap_{}.txt'
    mapofp = '../res/levmap_{}.bin'
    defifp = '../levels/levdef_{}.txt'
    defofp = '../res/levdef_{}.bin'

    asmfn1 = '../levels.asm'
    asmfn2 = '../levels_extra.asm'
    hfn = '../levels.h'
    cfn = '../levels.c'
    asmlicfn = '_asmlic.txt'
    clicfn = '_clic.txt'

    endl = '\n'
    endl2 = '\n\n'

    asmcmt = ';' * 40 + endl2
    
    hprolog = '''// autogenerated by tool
#ifndef _levels_h
#define _levels_h

#include "types.h"
#include "screen_game.h"

extern u8 level_count;

'''

    hepilog = '''extern u8 *levmap_array[];
extern LevelDef *levdef_array[];

#endif
'''

    htxt = hprolog

    cprolog = '''// autogenerated by tool
#include "levels.h"

u8 level_count = LEVCOUNT;

'''.replace('LEVCOUNT', str(levcnt))

    ctxt = cprolog

    def zeropad2(s):
        while len(s) < 2: s = '0' + s
        return s

    sym_levmap_arr = []
    sym_levdef_arr = []

    for index in range(levcnt):
        levnum = str(1 + index)
        suffix = zeropad2(levnum)

        mapifn = mapifp.format(suffix)
        mapofn = mapofp.format(suffix)
        print(mapifn, '->', mapofn)
        levmap_sz = levmap_cvt(mapifn, mapofn)
        print('levmap size:', levmap_sz)

        defifn = defifp.format(suffix)
        defofn = defofp.format(suffix)
        print(defifn, '->', defofn)
        levdef_sz = levdef_cvt(defifn, defofn)
        print('levdef size:', levdef_sz)

        sym_levmap = 'levmap_' + suffix
        asmtxt = ''
        asmtxt += 'PUBLIC _' + sym_levmap + endl
        asmtxt += '_' + sym_levmap + ':' + endl
        asmtxt += '    INCBIN "' + mapofn.replace('../', '') + '"' + endl2

        sym_levdef = 'levdef_' + suffix
        asmtxt += 'PUBLIC _' + sym_levdef + endl
        asmtxt += '_' + sym_levdef + ':' + endl
        asmtxt += '    INCBIN "' + defofn.replace('../', '') + '"' + endl2

        asmtxt += asmcmt

        htxt += 'extern u8 ' + sym_levmap + '[];' + endl
        htxt += 'extern u8 ' + sym_levdef + '[];' + endl2

        sym_levdef_arr.append(sym_levdef)
        sym_levmap_arr.append(sym_levmap)

        if index < 20:
            asmtxt1 += asmtxt
        else:
            asmtxt2 += asmtxt

    ctxt += 'u8 *levmap_array[] = {' + endl
    for sym in sym_levmap_arr:
        ctxt += '    ' + sym + ',' + endl
    ctxt += '};' + endl2

    ctxt += 'LevelDef *levdef_array[] = {' + endl
    for sym in sym_levdef_arr:
        ctxt += '    ' + sym + ',' + endl
    ctxt += '};' + endl2

    htxt += hepilog

    f = open(asmlicfn, 'rt')
    asmlic = f.read()
    f.close()

    f = open(clicfn, 'rt')
    clic = f.read()
    f.close()

    f = open(asmfn1, 'wt')
    f.write(asmlic)
    f.write(asmtxt1)
    f.close()

    f = open(asmfn2, 'wt')
    f.write(asmlic)
    f.write(asmtxt2)
    f.close()

    f = open(hfn, 'wt')
    f.write(clic)
    f.write(htxt)
    f.close()

    f = open(cfn, 'wt')
    f.write(clic)
    f.write(ctxt)
    f.close()

if __name__ == '__main__':
    convert_levels()